<blockquote>This demo shows (a) searching a Binary Search Tree and (b) Inserting a new node in that tree.  Note that searching here builds on reducing the amount of data to search each time; the second relies on rearranging data efficiently.</blockquote>
<br />
<pre>
# Python3 function to search a given key in a given BST
 
class Node:
    # Constructor to create a new node
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
 
# A utility function to insert
# a new node with the given key in BST
def insert(node, key):
    # If the tree is empty, return a new node
    if node is None:
        return Node(key)
 
    # Otherwise, recur down the tree
    if key < node.key:
        node.left = insert(node.left, key)
    elif key > node.key:
        node.right = insert(node.right, key)
 
    # Return the (unchanged) node pointer
    return node
 
# Utility function to search a key in a BST
def search(root, key):
    # Base Cases: root is null or key is present at root
    if root is None or root.key == key:
        return root
 
    # Key is greater than root's key
    if root.key < key:
        return search(root.right, key)
 
    # Key is smaller than root's key
    return search(root.left, key)
 
# Driver Code
if __name__ == '__main__':
    root = None
    root = insert(root, 50)
    insert(root, 30)
    insert(root, 20)
    insert(root, 40)
    insert(root, 70)
    insert(root, 60)
    insert(root, 80)
 
    # Key to be found
    key = 6
 
    # Searching in a BST
    if search(root, key) is None:
        print(key, "not found")
    else:
        print(key, "found")
 
    key = 60
 
    # Searching in a BST
    if search(root, key) is None:
        print(key, "not found")
    else:
        print(key, "found")


# Python program to insert a node in a BST
# Binary Search Tree

# Given Node
class Node:
	def __init__(self, key):
		self.key = key
		self.left = None
		self.right = None

# Function to insert a new node with
# given key in BST
def insert(node, key):
	# If the tree is empty, return a new node
	if node is None:
		return Node(key)

	# Otherwise, recur down the tree
	if key < node.key:
		node.left = insert(node.left, key)
	elif key > node.key:
		node.right = insert(node.right, key)

	# Return the node pointer
	return node

# Function to do inorder traversal of BST
def inorder(root):
	if root is not None:
		inorder(root.left)
		print(root.key, end=" ")
		inorder(root.right)

# Driver Code
if __name__ == '__main__':
	"""
	Let us create following BST
		50
	/	 \
	30	 70
	/ \ / \
	20 40 60 80
	"""
	root = None

	# Inserting value 50
	root = insert(root, 50)

	# Inserting value 30
	insert(root, 30)

	# Inserting value 20
	insert(root, 20)

	# Inserting value 40
	insert(root, 40)

	# Inserting value 70
	insert(root, 70)

	# Inserting value 60
	insert(root, 60)

	# Inserting value 80
	insert(root, 80)

	# Print the BST
	inorder(root)
	
</pre>